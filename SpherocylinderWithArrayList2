/**
  *Creates an arraylist tht accepts only spherocylinder objects in it.
  *
  *@author Mitchel Santillan Cruz
  *@version 2/3/2020
  */
import java.util.ArrayList;
import java.text.DecimalFormat;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
public class SpherocylinderList {
   //Fields
   private String listName = "";
   ArrayList<Spherocylinder> list = new ArrayList<Spherocylinder>();
   
   //Constructor
   public SpherocylinderList(String listNameIn, ArrayList<Spherocylinder> listIn) {
      listName = listNameIn;
      list = listIn;
   }
   
   //Methods
   public String getName() {
      return listName;
   }
   
   public int numberOfSpherocylinders() {
      return list.size();
   }
   
   public double totalSurfaceArea() {
      double total = 0;
      //Enhanced for loop
      for (Spherocylinder obj : list) {
         total += obj.surfaceArea();
      }
      return total;
   }
   
   public double totalVolume() {
      double total = 0;
      for (Spherocylinder obj : list) {
         total += obj.volume();
      }
      return total;
   }
   
   public double averageSurfaceArea() {
      double result = 0;
      if (list.size() > 0) {
         result = totalSurfaceArea() / list.size();
      }
      return result;
   }
   
   public double averageVolume() {
      double result = 0;
      if (list.size() > 0) {
         result = totalVolume() / list.size();
      }
      return result;
   }
   
   public String toString() {
      String output = "\n" + listName + "\n\n";
      for (Spherocylinder obj : list) {
         output = output + obj + "\n\n";
      }
      return output;
   }
   
   public String summaryInfo() {
      DecimalFormat df = new DecimalFormat("#,##0.0##");
      String output = "----- Summary  for " + listName + " -----"
         + "\nNumber of Spherocylinders: " + numberOfSpherocylinders()
         + "\nTotal Surface Area: " + df.format(totalSurfaceArea())
         + "\nTotal Volume: " + df.format(totalVolume())
         + "\nAverage Surface Area: " + df.format(averageSurfaceArea())
         + "\nAverage Volume: " + df.format(averageVolume());
      return output;
   }
   
   //methods below are new additions
   public ArrayList<Spherocylinder> getList() {
      return list;
   }
   
   public SpherocylinderList readFile(String fileNameIn) throws FileNotFoundException {
      String title = "";
      String label = "";
      double radius = 0;
      double cHeight = 0;
      
      Spherocylinder obj = null;
      //ArrayList<Spherocylinder> list = new ArrayList<Spherocylinder>();
      SpherocylinderList sphereList;
      
      Scanner scan = new Scanner(new File(fileNameIn));
      title = scan.nextLine();
      while (scan.hasNext()) {
         label = scan.nextLine();
         radius = Double.parseDouble(scan.nextLine());
         cHeight = Double.parseDouble(scan.nextLine());
         
         obj = new Spherocylinder(label, radius, cHeight);
         list.add(obj);
      }
      scan.close();
      
      sphereList = new SpherocylinderList(title, list);
      return sphereList;
   }
   
   public void addSpherocylinder(String labelIn, double radiusIn, double cHeightIn) {
      Spherocylinder obj = new Spherocylinder(labelIn, radiusIn, cHeightIn);
      list.add(obj);
   }
   
   public Spherocylinder findSpherocylinder(String labelIn) {
      Spherocylinder obj = null;
      for (Spherocylinder obj_2 : list) {
         if (obj_2.getLabel().equalsIgnoreCase(labelIn)) {
            obj = obj_2;
         }
      }
      return obj;
   }
   
   public Spherocylinder deleteSpherocylinder(String labelIn) {
      Spherocylinder obj = findSpherocylinder(labelIn);
      if (obj != null) {
         list.remove(obj);
      }
      return obj;
   }
   
   public boolean editSpherocylinder(String labelIn, double radiusIn, double cHeightIn) {
      boolean isEdited = false;
      Spherocylinder obj = findSpherocylinder(labelIn);
      if (obj != null) {
         obj.setRadius(radiusIn);
         obj.setCylinderHeight(cHeightIn);
         isEdited = true;
      }
      return isEdited;
   }
}

---------------------------------------------------------------------------------------------------------------------------------------------

/**
  *Acts as the driver for the SpherocylinderList class.
  *
  *@author Mitchel Santillan Cruz
  *@version 2/4/2020
  */
import java.util.Scanner;
import java.util.ArrayList;
import java.io.File;
import java.io.FileNotFoundException;
public class SpherocylinderListMenuApp {
   /**
     *Performs certain operations based on user input.
     *
     *@param args Command Line Arguments (not used)
     */
   public static void main(String[] args) throws FileNotFoundException {
      //Variables
      String title = "";
      String input = "";
      char option;
      String label = "";
      double radius = 0;
      double cHeight = 0;
      
      //Objects
      Scanner scan = new Scanner(System.in);
      ArrayList<Spherocylinder> list = new ArrayList<Spherocylinder>();
      Spherocylinder obj = null;
      SpherocylinderList objList = new SpherocylinderList(title, list);;
      
      System.out.println("Spherocylinder List System Menu"
         + "\n\tR - Read File and Create Spherocylinder List"
         + "\n\tP - Print Spherocylinder List"
         + "\n\tS - Print Summary"
         + "\n\tA - Add Spherocylinder"
         + "\n\tD - Delete Spherocylinder"
         + "\n\tF - Find Spherocylinder"
         + "\n\tE - Edit Spherocylinder"
         + "\n\tQ - Quit");
      
      do {      
         System.out.print("Enter Code [R, P, S, A, D, F, E, or Q]: ");
         input = scan.nextLine();
         option = input.trim().toUpperCase().charAt(0);
         switch (option) {               
         case 'R':
            String fileName = "";
            System.out.print("\tFile name: ");
            fileName = scan.nextLine();
            objList = objList.readFile(fileName);
            System.out.println("\tFile read in and Spherocylinder List created\n");
            break;
         case 'P':
            System.out.println(objList);
            break;
         case 'S':
            System.out.println("\n" + objList.summaryInfo() + "\n");
            break;
         case 'A':
            System.out.print("\tLabel: ");
            label = scan.nextLine();
            System.out.print("\tRadius: ");
            radius = Double.parseDouble(scan.nextLine());
            System.out.print("\tCylinder Height: ");
            cHeight = Double.parseDouble(scan.nextLine());
            objList.addSpherocylinder(label, radius, cHeight);
            System.out.println("\t*** Spherocylinder added ***\n");
            break;
         case 'D':
            System.out.print("\tLabel: ");
            label = scan.nextLine();
            obj = objList.findSpherocylinder(label);
            if (obj != null) {
               objList.deleteSpherocylinder(label);
               System.out.println("\t\"" + obj.getLabel() + "\" deleted\n");
            } else {
               System.out.println("\t\"" + label + "\" not found\n");
            }
            break;
         case 'F':
            System.out.print("\tLabel: ");
            label = scan.nextLine();
            obj = objList.findSpherocylinder(label);
            System.out.println(obj + "\n");
            break;
         case 'E':
            System.out.print("\tLabel: ");
            label = scan.nextLine();
            System.out.print("\tRadius: ");
            radius = Double.parseDouble(scan.nextLine());
            System.out.print("\tCylinder Height: ");
            cHeight = Double.parseDouble(scan.nextLine());  
            obj = objList.findSpherocylinder(label);         
            if (obj != null) {
               objList.editSpherocylinder(label, radius, cHeight);
               System.out.println("\t\"" + obj.getLabel()
                  + "\" successfully edited\n");
            } else {
               System.out.println("\t\"" + label + "\" not found\n");
            }
            break;
         case 'Q':
            break;
         default:
            System.out.println("\t*** invalid code ***\n");         
      }
      } while (option != 'Q');      
   }
}
